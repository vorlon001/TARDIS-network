---
# main.yml
- hosts: bootstrap
  tasks:
    - name: Check disk space
      command: df -h
      register: result
    - debug: var=result.stdout_lines

    - name: kubectl get node
      command: kubectl get node -A -o wide
      register: result
    - debug: var=result.stdout_lines


    - name: Copy Helm
      ansible.builtin.copy:
        src: "UTILS/{{HELMFILE}}"
        dest: "/tmp/{{HELMFILE}}"
        owner: root
        group: root
        mode: '0644'

    - name: install helm
      environment:
        HELMVERSION: "{{HELMVERSION}}"
        HELMFILE: "{{HELMFILE}}"
      shell: |
         cd /tmp
         ls -la
         tar -zxvf {{HELMFILE}}
         mv linux-{{platform}}/helm /usr/bin/helm-v{{HELMVERSION}}
         rm -R linux-{{platform}}
         chmod +x /usr/bin/helm-v{{HELMVERSION}}
         cp /usr/bin/helm-v{{HELMVERSION}} /usr/bin/helm
      register: result
    - debug: var=result.stdout_lines

    - name: Helm repo add cloudstack
      kubernetes.core.helm_repository:
        name: cloudstack
        repo_url: "{{HELM_CHARTMUSEUM}}"

    - name: Deploy cilium
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      community.kubernetes.helm:
        name: cloudstack
        chart_ref: "cloudstack/cilium"
        release_state: present
        update_repo_cache: true
        release_namespace: kube-system
        create_namespace: yes
        chart_version: "{{CILIUM_chart_version}}"
        values:
          kubeProxyReplacement: strict
          clusterDomain: "KUBERNETES_clusterDomain"
          k8sServiceHost: "{{KUBERNETES_VIP}}"
          k8sServicePort: 6443
          rollOutCiliumPods: "true"
          tunnel: vxlan
          image:
              repository: "{{CILIUM_REPO}}"
          hubble:
              enabled: "false"
              tls:
                  auto:
                    enabled: "false"

              relay:
                  image:
                      repository: "{{CILIUM_hubble_relay}}"
              ui:
                  backend:
                      image:
                          repository: "{{CILIUM_hubble_backend}}"
                  frontend:
                      image:
                          repository: "{{CILIUM_hubble_frontend}}"
          bpf:
              masquerade: true
          egressGateway:
              enabled: true
          operator:
              rollOutPods: "true"
              image:
                  repository: "{{CILIUM_operator}}"
          ipam:
              operator:
                  clusterPoolIPv4PodCIDRList: "{{CILIUM_clusterPoolIPv4PodCIDRList}}"
                  clusterPoolIPv4MaskSize: "{{CILIUM_clusterPoolIPv4MaskSize}}"
          clustermesh:
              apiserver:
                  etcd:
                      image:
                          repository: "{{CILIUM_etcd}}"
              image:
                  repository: "{{CILIUM_clustermesh}}"
              kvstoremesh:
                  image:
                      repository: "{{CILIUM_kvstoremesh}}"
          certgen:
                  image:
                      repository: "{{CILIUM_certgen}}"
          envoy:
                  image:
                      repository: "{{CILIUM_REPO}}-envoy"
          etcd:
                  image:
                      repository: "{{CILIUM_REPO}}-etcd-operator"
          nodeinit:
                  image:
                      repository: "{{CILIUM_nodeinit}}"
          preflight:
                  image:
                      repository: "{{CILIUM_REPO}}"

      register: result
    - debug: var=result.stdout_lines

    - name: Sleep 90 second, init CNI
      pause:
        seconds: 90

    - name: Update repositories cache and install "python3-pip" package
      ansible.builtin.apt:
        name: python3-pip
        update_cache: yes

    - name: pip3 install kubernetes
      command: pip3 install kubernetes --break-system-packages
      register: result
    - debug: var=result.stdout_lines

    - name: Create namespace NFS
      kubernetes.core.k8s:
        state: present
        template:
          path: 'CSI-NFS/01-namespace.yaml.j2'

    - name: Create NFS CSI 02-ServiceAccount.yaml.j2
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'CSI-NFS/02-ServiceAccount.yaml.j2'

    - name: Create NFS CSI 03-Role.yaml
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'CSI-NFS/03-Role.yaml.j2'

    - name: Create NFS CSI 04-Deployment.yaml
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'CSI-NFS/04-Deployment.yaml.j2'

    - name: Create NFS CSI 05-StorageClass.yaml
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'CSI-NFS/05-StorageClass.yaml.j2'


    - name: add label to existing namespace
      kubernetes.core.k8s:
        state: patched
        kind: StorageClass
        name: managed-nfs-storage
        definition:
          metadata:
            annotations:
              "storageclass.kubernetes.io/is-default-class": "true"

    - name: Create PriorityClass
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'POST-INIT/PriorityClass.yaml.j2'

    - name: Create Metrics Server
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'POST-INIT/v0.6.4-high-availability.yaml.j2'

    - name: Create cert manager
      kubernetes.core.k8s:
        state: present
        apply: true
        template:
          path: 'POST-INIT/cert-manager.yaml.j2'



